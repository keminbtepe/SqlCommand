USE ETRADE
-------------------------------------------
CREATE TABLE ITEMS_LOG(
					ID INT NOT NULL,
					ITEMCODE VARCHAR(50),
					ITEMNAME VARCHAR(100),
					UNITPRICE FLOAT,
					CATEGORY1 VARCHAR(50),
					CATEGORY2 VARCHAR(50),
					CATEGORY3 VARCHAR(50),
					CATEGORY4 VARCHAR(50),
					BRAND VARCHAR(50),
					LOG_ACTIONTYPE VARCHAR(20),
					LOG_DATE DATETIME,
					LOG_USERNAME VARCHAR(50),
					LOG_PROGRAMNAME VARCHAR(50),
					LOG_HOSTNAME VARCHAR(50)
    				)
----------------------------------------------
SELECT * FROM ITEMS_LOG
--------------------------------------

CREATE TRIGGER TRG_ITEMS_UPDATE
ON ITEMS
AFTER UPDATE
AS 
BEGIN
INSERT INTO ITEMS_LOG (ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, LOG_ACTIONTYPE, LOG_DATE, LOG_USERNAME, LOG_PROGRAMNAME, LOG_HOSTNAME)
SELECT ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, 'UPDATE', GETDATE(), SUSER_NAME(), PROGRAM_NAME(), HOST_NAME()
FROM DELETED
END
-----------------------------------------------------------------
CREATE TRIGGER TRG_ITEMS_DELETE
ON ITEMS
AFTER DELETE
AS 
BEGIN
INSERT INTO ITEMS_LOG (ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, LOG_ACTIONTYPE, LOG_DATE, LOG_USERNAME, LOG_PROGRAMNAME, LOG_HOSTNAME)
SELECT ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, 'DELETE', GETDATE(), SUSER_NAME(), PROGRAM_NAME(), HOST_NAME()
FROM DELETED
END


----------------------------
DROP TRIGGER TRG_ITEMS_DELETE,TRG_ITEMS_UPDATE
-------------------------------------------------------

CREATE TRIGGER TRG_ITEMS_DELETE_UPDATE
ON ITEMS
AFTER DELETE,UPDATE
AS 
BEGIN
DECLARE @DELETECOUNT AS INT
DECLARE @INSERTCOUNT AS INT 

SELECT @DELETECOUNT=COUNT(*) FROM DELETED
SELECT @INSERTCOUNT=COUNT(*) FROM INSERTED

DECLARE @LOG_ACTIONTYPE AS VARCHAR(8)

IF @DELETECOUNT>0 AND @INSERTCOUNT>0
	SET @LOG_ACTIONTYPE = 'UPDATE'
IF @DELETECOUNT>0 AND @INSERTCOUNT=0
	SET @LOG_ACTIONTYPE = 'DELETE'

INSERT INTO ITEMS_LOG (ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, LOG_ACTIONTYPE, LOG_DATE, LOG_USERNAME, LOG_PROGRAMNAME, LOG_HOSTNAME)
SELECT ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, @LOG_ACTIONTYPE, GETDATE(), SUSER_NAME(), PROGRAM_NAME(), HOST_NAME()
FROM DELETED
END

-------------------
DROP TRIGGER TRG_ITEMS_DELETE_UPDATE


----------------------------------

CREATE TRIGGER TRG_ITEMS_DELETE_UPDATE_INSTEAD
ON ITEMS
INSTEAD OF DELETE,UPDATE
AS 
BEGIN
DECLARE @DELETECOUNT AS INT
DECLARE @INSERTCOUNT AS INT 

SELECT @DELETECOUNT=COUNT(*) FROM DELETED
SELECT @INSERTCOUNT=COUNT(*) FROM INSERTED

DECLARE @LOG_ACTIONTYPE AS VARCHAR(8)

IF @DELETECOUNT>0 AND @INSERTCOUNT>0
	SET @LOG_ACTIONTYPE = 'UPDATE'
IF @DELETECOUNT>0 AND @INSERTCOUNT=0
	SET @LOG_ACTIONTYPE = 'DELETE'

INSERT INTO ITEMS_LOG (ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, LOG_ACTIONTYPE, LOG_DATE, LOG_USERNAME, LOG_PROGRAMNAME, LOG_HOSTNAME)
SELECT ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, @LOG_ACTIONTYPE, GETDATE(), SUSER_NAME(), PROGRAM_NAME(), HOST_NAME()
FROM DELETED
END
-------------------------

DISABLE TRIGGER TRG_ITEMS_DELETE_UPDATE ON ITEMS
